#include "catch.hpp"

#include <vector>
#include <stdlib.h>
#include <stdio.h>

#include "databases.hpp"
#include "star-id.hpp"
#include "star-utils.hpp"
#include "camera.hpp"
#include "io.hpp"
#include "fixtures.h"

using namespace lost;

TEST_CASE("Tres Commas", "[gv] [fast]") {
    // TODO: Check that both stars receive exactly 2 votes, there's no reason for them to get 1 vote each!
    const Catalog &catalog = GENERATE((const Catalog &)tripleCatalog,
                                      (const Catalog &)quadrupleCatalog,
                                      (const Catalog &)harderQuadrupleCatalog);
    const Camera &camera = GENERATE((const Camera &)smolCamera,
                                    (const Camera &)smolCameraOff);
    GeneratedPipelineInput gpi(catalog, straightAhead, camera, 0, 0.0, 0.0);
    unsigned char *db = BuildKVectorDatabase(catalog, NULL, DegToRad(.5), DegToRad(20), 1000);
    StarIdentifiers outputStarIds = GeometricVotingStarIdAlgorithm(DegToRad(0.01)).Go(db, *gpi.InputStars(), catalog, camera);

    StarIdComparison comparison = StarIdsCompare(*gpi.ExpectedStarIds(), outputStarIds, 0.0, gpi.ExpectedStars(), NULL);
    REQUIRE(comparison.numTotal == catalog.size());
    CHECK(comparison.numCorrect == catalog.size());
}

TEST_CASE("Real catalog tests", "[gv]") {
    const Catalog &catalog = CatalogRead();
    const Camera &camera = GENERATE((const Camera &)smolCamera,
                                    (const Camera &)smolCameraOff);
    float ra = GENERATE(DegToRad(88.0), DegToRad(24.2));
    float de = GENERATE(DegToRad(3.9), DegToRad(33.9));
    float roll = GENERATE(DegToRad(84.5), DegToRad(66.8));
    Quaternion attitude = SphericalToQuaternion(ra, de, roll);
    printf("GV test: %s, ra=%f, de=%f, roll=%f\n",
        &camera == &smolCamera ? "normal camera" : "offset camera",
        ra, de, roll);
    GeneratedPipelineInput gpi(catalog, attitude, camera, 0, 0.0, 0.0);
    unsigned char *db = BuildKVectorDatabase(catalog, NULL, DegToRad(.5), DegToRad(20), 1000);
    StarIdentifiers outputStarIds = GeometricVotingStarIdAlgorithm(DegToRad(0.01)).Go(db, *gpi.InputStars(), catalog, camera);

    StarIdComparison comparison = StarIdsCompare(*gpi.ExpectedStarIds(), outputStarIds, 0.0, gpi.ExpectedStars(), NULL);
    
    REQUIRE(comparison.numTotal == gpi.InputStars()->size());
    CHECK(comparison.numCorrect >= gpi.InputStars()->size() * 7 / 10);
    CHECK(comparison.numIncorrect == 0);
}

// TEST_CASE("Wrong focal length", "[gv] [fast]") {
//     GeneratedPipelineInput gpi(CatalogRead(), straightAhead, smolCamera, 0, 0.0, 0.0);
//     unsigned char *db = BuildKVectorDatabase(CatalogRead(), NULL, DegToRad(.5), DegToRad(20), 1000);
//     GeometricVotingStarIdAlgorithm *gv = new GeometricVotingStarIdAlgorithm(DegToRad(0.001));
//     gv->Go()
// }
